syntax = "proto3";

package servio;

message NullMsg {};

// Control modes of the servo, the name of field represetns mode name and value
// represents the goal value for that mode.
message Mode {
  oneof pld {
    NullMsg disengaged = 1;  // servo is actively driving the motor
    float power = 2;         // -1.0...1.0, sign represents direction
    float current = 3;       // in A, sign represents direction
    float velocity = 4;      // in rad/s, sign represents direction
    float position = 5;      // in rad
  }
}

// Properties that can be queried from the servo. Reply represents current value
// of that property.
message Property {
  oneof pld {
    Mode mode = 1;
    float current = 2;   // A
    float vcc = 3;       // V
    float temp = 4;      // C
    float position = 5;  // rad
    float velocity = 6;  // rad/s
  }
}

// Config message represents all configuration options for the servio, one
// instance of this message represents one value of any of the configuration
// fields.
message Config {
  oneof pld {
    // String identifying the model of servo, used for debugging purposes.
    string model = 1;

    uint32 id = 2;
    uint32 group_id = 3;

    // Position conversion uses two setpoints (lower/higher) to setup a
    // conversion from the range of measuring sensor to real angle (in radians).
    uint32 position_conv_lower_setpoint_value = 10;  // sensor at lower setpoint
    float position_conv_lower_setpoint_angle = 11;   // angle at lower setpoint
    uint32 position_conv_higher_setpoint_value =
        12;  // sensor at higher setpoint
    float position_conv_higher_setpoint_angle = 13;  // angle at higher setpoing

    // Current conversion uses simple linear formula: x = y * scale + offset, to
    // convert from mesured value via ADC to real currrent.
    float current_conv_scale = 14;
    float current_conv_offset = 15;

    // Temperature conversion uses simple linear formula: x = y * scale +
    // offset, to convert from mesured value via ADC to real currrent. Note that
    // this refers to internal temperature of the MCU.
    float temp_conv_scale = 16;
    float temp_conv_offset = 17;

    // Converts voltage from measured value into real value by scaling it with
    // provided scale.
    float voltage_conv_scale = 18;

    // PID configuration parameters for current control loop
    float current_loop_p = 30;
    float current_loop_i = 31;
    float current_loop_d = 32;

    // Current control loop limits (in A)
    float current_lim_min = 33;
    float current_lim_max = 34;

    // PID configuration parameters for velocity control loop
    float velocity_loop_p = 40;
    float velocity_loop_i = 41;
    float velocity_loop_d = 42;

    // Velocity control loop limits (in rad/s)
    float velocity_lim_min = 43;
    float velocity_lim_max = 44;

    // Velocity limits are handled by scaling down current, this affects the scale.
    float velocity_to_current_lim_scale = 45;

    // PID configuration parameters for position control loop
    float position_loop_p = 50;
    float position_loop_i = 51;
    float position_loop_d = 52;

    // Position control loop limits (in rad)
    float position_lim_min = 53;
    float position_lim_max = 54;

    // Position limits are handled by scaling down velocity, this affects the scale.
    float position_to_velocity_lim_scale = 55;

    // Outside of the normal functionality of the control loops, the current
    // desired by velocity loop will be scaled by `static_friction_scale` in
    // case the servo detects that it is not moving. This is here to give the
    // servo a necessary kick from non-moving position. Decay specifies how fast
    // that scale disappears after servo starts moving. `moving_detection_step`
    // configurs how much shall servo move for it to be considered moving.
    float static_friction_scale = 60;
    float static_friction_decay = 61;
    float moving_detection_step = 62;  // in rad

    // Sets limits for monitored values, these wont affect the servo, the servo
    // will just signal with leds that values are outside of desired range.
    float minimum_voltage = 65;
    float maximum_temperature = 66;
  }
}

// Query the servo for desired property. field_id refers to the protobuf id of
// fields in Property message, more information there.
message GetProperty {
  uint32 field_id = 1;  // field id of the property
};

// Query the servo for desired configuration value. field_id refers to the
// protobuf id of fields in Config message, more information there.
message GetConfig {
  uint32 field_id = 1;
};

// Message sent from the host to the servo, represents a group of messages, out
// of which only one is sent.
message HostToServio {
  // Contains one of the available messages
  oneof pld {
    Mode set_mode = 11;             // changes mode
    GetProperty get_property = 12;  // queries property
    Config set_config = 13;         // sets config value based on Config content
    GetConfig get_config = 14;      // retrivies config vlaue
    NullMsg commit_config = 15;     // commits current config into the memory
    NullMsg clear_config = 16;      // clears stored config
  };
};

// Packet version of HostToServio that shall be used in case the underlying
// transport mechanism does not support addressing of the devices and multiple
// devices share a bus
message HostToServioPacket {
  uint32 id = 1;
  HostToServio payload = 10;
};

message ErrorMsg {
  string msg = 1;
};

// Reply message sent by the servo
message ServioToHost {
  oneof pld {
    ErrorMsg error = 10;
    NullMsg set_mode = 11;
    Property get_property = 12;
    NullMsg set_config = 13;
    Config get_config = 14;
    NullMsg commit_config = 15;
    NullMsg clear_config = 16;
  };
};

// Reply message sent by the servo, version for buses that natively does not
// support addressing.
message ServioToHostPacket {
  uint32 id = 1;
  ServioToHost payload = 10;
};
